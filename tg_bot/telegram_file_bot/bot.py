
import logging
import os
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, Document, PhotoSize
import aiohttp
from tasks import process_pdf_task
from config import API_TOKEN, DOWNLOAD_PATH


# ---------------------- Configuration ----------------------

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF
# (–ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ processing.py)

# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs(DOWNLOAD_PATH, exist_ok=True)

# ---------------------- Logging Setup ----------------------

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

# ---------------------- Bot Initialization ----------------------

bot = Bot(token=API_TOKEN, parse_mode="HTML")
dp = Dispatcher()

# ---------------------- Helper Functions ----------------------


async def download_file(bot: Bot, file_id: str, file_path: str) -> str:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª —Å Telegram —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ.

    :param bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞.
    :param file_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–∞–π–ª–∞ –≤ Telegram.
    :param file_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞.
    :return: –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Ñ–∞–π–ª–∞ –∏–∑ Telegram
        file = await bot.get_file(file_id)
        file_url = f"https://api.telegram.org/file/bot{API_TOKEN}/{file.file_path}"

        logger.info(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å {file_url} –≤ {file_path}")

        async with aiohttp.ClientSession() as session:
            async with session.get(file_url) as response:
                if response.status == 200:
                    with open(file_path, 'wb') as f:
                        while True:
                            chunk = await response.content.read(1024)
                            if not chunk:
                                break
                            f.write(chunk)
                    logger.info(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {file_path}")
                    return file_path
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª: HTTP {response.status}")
                    return ""
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return ""

# ---------------------- Handlers ----------------------


@dp.message(Command(commands=["start", "help"]))
async def send_welcome(message: Message):
    """
    –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—ã /start –∏ /help –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
    """
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ PDF —Ñ–∞–π–ª, –∏ —è –æ–±—Ä–∞–±–æ—Ç–∞—é –µ–≥–æ –¥–ª—è –≤–∞—Å. üìÑ"
    )
    await message.answer(welcome_text)


@dp.message(F.document)
async def handle_document(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (—Ñ–∞–π–ª—ã).
    """
    document: Document = message.document
    file_id = document.file_id
    filename = document.file_name or f"document_{file_id}"
    file_extension = os.path.splitext(filename)[1].lower()

    if file_extension != '.pdf':
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª.")
        return

    sanitized_filename = f"{file_id}{file_extension}"
    file_path = os.path.join(DOWNLOAD_PATH, sanitized_filename)

    logger.info(f"–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç: {filename} (ID: {file_id})")

    saved_path = await download_file(bot, file_id, file_path)

    if saved_path:
        await message.answer("üìÑ PDF —Ñ–∞–π–ª –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É.")
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏ –≤ Celery –æ—á–µ—Ä–µ–¥—å
        process_pdf_task.delay(file_path)
    else:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å PDF —Ñ–∞–π–ª.")


@dp.message(F.photo)
async def handle_photo(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.
    """
    photo_sizes: list[PhotoSize] = message.photo
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ –Ω–∞–∏–≤—ã—Å—à–µ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    photo = photo_sizes[-1]
    file_id = photo.file_id
    file_extension = '.jpg'  # –û–±—ã—á–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ JPEG
    sanitized_filename = f"{file_id}{file_extension}"
    file_path = os.path.join(DOWNLOAD_PATH, sanitized_filename)

    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ: ID {file_id}")

    saved_path = await download_file(bot, file_id, file_path)

    if saved_path:
        await message.answer("üì∏ –§–æ—Ç–æ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
    else:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ.")


@dp.message()
async def handle_other_messages(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    await message.answer("ü§î –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")

# ---------------------- Startup and Shutdown ----------------------


async def on_startup():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")


async def on_shutdown():
    await bot.session.close()
    logger.info("–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω.")


# ---------------------- Main ----------------------

if __name__ == '__main__':
    try:
        dp.startup.register(on_startup)
        dp.shutdown.register(on_shutdown)
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        dp.run_polling(bot, allow_updates=True)
    except (KeyboardInterrupt, SystemExit):
        logger.error("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")